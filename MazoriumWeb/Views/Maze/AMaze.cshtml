@model MazoriumWeb.Models.MazeView

@{
    ViewData["Title"] = "Your Maze";
}

<h1>A maze</h1>
<form asp-controller="Maze" asp-action="AMaze">
    <p>
        <div class="form-group; row" style="margin-bottom:15px;">
            <div class="col-md-2">
                <label style="font-weight : bold;">Width:</label>
                <input asp-for="AMaze.Width" name="width" max="40" class="form-control" style="width:80px; margin-right:20px;" />
            </div>
            <div class="col-md-2">
                <label style="font-weight : bold;">Height:</label>
                <input asp-for="AMaze.Height" name="height" max="40" class="form-control" style="width:80px;" />
            </div>
            <div class="col-md-4">
                <label style="font-weight : bold;">Random Seed: (enter 0 for a random maze)</label>
                <input asp-for="AMaze.Seed" name="seed" value="0" class="form-control" style="width:180px;" />
            </div>
         </div>
         <button type="submit" class="btn btn-success">New maze</button>
</p>
</form>

<div class="row">
    <div class="w-100 mx-auto" style="font-family:'Lucida Console', monospace;">
        @* Print intro text *@
        <br />
        Start Here!<br />
        &nbsp;V
        @* Render maze *@
        @* Start with top line *@
        @for (int i = 2; i <= Model.AMaze.Width; i++)
        {
            <text>_&nbsp;</text>
        }
        <br />

        @* Print bottom and right borders of each cell *@
        @for (int row = 1; row <= Model.AMaze.Height; row++)
        {
            for (int col = 1; col <= Model.AMaze.Width; col++)
            {
                // Print left side of maze
                if (1 == col)
                {
                    <text>|</text>
                }

                // Bottom
                if (row == Model.AMaze.Height || (!Model.AMaze.GetAt(col, row + 1).IsConnectedTo(Model.AMaze.GetAt(col, row))))
                {
                    if (Model.AMaze.GetAt(col, row) != Model.AMaze.End)
                    {
                        <text>_</text>
                    }
                    else // Print end cell with no bottom as an exit
                    {
                        <text>&nbsp;</text>
                    }
                }
                else
                {
                    <text>&nbsp;</text>
                }

                // Right
                if (col == Model.AMaze.Width || (!Model.AMaze.GetAt(col + 1, row).IsConnectedTo(Model.AMaze.GetAt(col, row))))
                {
                    <text>|</text>;
                }
                else
                {
                    <text>&nbsp;</text>
                }
            }
            <br />
        }
        <br />

        @* TODO: Enable navigation of the maze! *@

    </div>
</div>

<div>
    <p>
        <label>Seed:&nbsp;@Model.Seed</label><br />
        @if (null != Model.DFSPath)
        {
            <text>Depth first search (DFS) solution in @Model.DFSPath.Count() steps</text><br />
        }
        else
        {
            <text>No depth first search solution identified</text>< br />
        }

        @if (null != Model.BFSPath)
        {
            <text>Breadth first search (BFS) solution in @Model.BFSPath.Count() steps</text>
        }
        else
        {
            <text>No breadth first search solution identified</text>
        }
    </p>
    </div>

@*<div>
        <a asp-controller="Maze" asp-action="AMaze">New Maze</a>
    </div>*@
